from telebot import TeleBot, types
from config import TOKEN, DATABASE
from logic import DB_Manager

bot = TeleBot(TOKEN)
manager = DB_Manager(DATABASE)

hideBoard = types.ReplyKeyboardRemove()
cancel_button = "–û—Ç–º–µ–Ω–∞ üö´"

def cancel(message):
    bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–π - /info", reply_markup=hideBoard)

def no_projects(message):
    bot.send_message(message.chat.id, '–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞!')

def gen_inline_markup(rows):
    markup = types.InlineKeyboardMarkup()
    markup.row_width = 1
    for row in rows:
        markup.add(types.InlineKeyboardButton(row, callback_data=row))
    return markup

def gen_markup(rows):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.row_width = 1
    for row in rows:
        markup.add(types.KeyboardButton(row))
    markup.add(types.KeyboardButton(cancel_button))
    return markup

@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤.\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–æ—Ö–æ–¥—ã.\n–î–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π /info")
    info(message)

@bot.message_handler(commands=['info'])
def info(message):
    bot.send_message(message.chat.id,
    """
    –í–æ—Ç –∫–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ç–µ–±–µ –ø–æ–º–æ—á—å:

    /new_income - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ—Ö–æ–¥–∞
    /new_expense - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞
    /records - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
    /delete - —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    /update_income - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞
    /update_expense - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
    """)

@bot.message_handler(commands=['records'])
def get_records(message):
    user_id = message.from_user.id
    records = manager.get_records(user_id)
    if records:
        text = "\n".join([f"Record ID: {record[0]}, Amount: {record[2]}, Category: {record[3]}, Description: {record[4]}, Date: {record[5]}" for record in records])
        bot.send_message(message.chat.id, text)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")

@bot.message_handler(commands=['new_income'])
def new_income(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:")
    bot.register_next_step_handler(message, income_amount)

def income_amount(message):
    amount = message.text
    user_id = message.from_user.id
    data = [user_id, amount]
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–∞:")
    bot.register_next_step_handler(message, income_description, data=data)

def income_description(message, data):
    description = message.text
    data.append(description)
    from datetime import datetime
    data.append(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    success = manager.insert_income([tuple(data)])
    if success:
        bot.send_message(message.chat.id, "–î–æ—Ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ—Ö–æ–¥")

@bot.message_handler(commands=['new_expense'])
def new_expense(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")
    bot.register_next_step_handler(message, expense_amount)

def expense_amount(message):
    amount = message.text
    user_id = message.from_user.id
    data = [user_id, amount]
    categories = manager.get_expense_categories()
    category_names = [category[0] for category in categories]
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=gen_markup(category_names))
    bot.register_next_step_handler(message, expense_description, data=data, category_names=category_names)

def expense_description(message, data, category_names):
    category = message.text
    if category == cancel_button:
        cancel(message)
        return
    if category not in category_names:
        bot.send_message(message.chat.id, "–¢—ã –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!", reply_markup=gen_markup(category_names))
        bot.register_next_step_handler(message, expense_description, data=data, category_names=category_names)
        return
    data.append(category)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞:")
    bot.register_next_step_handler(message, save_expense, data=data)

def save_expense(message, data):
    description = message.text
    data.append(description)
    from datetime import datetime
    data.append(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    success = manager.insert_expense([tuple(data)])
    if success:
        bot.send_message(message.chat.id, "–†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥.")

@bot.message_handler(commands=['delete'])
def delete_record(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    bot.register_next_step_handler(message, confirm_delete)

def confirm_delete(message):
    record_id = message.text
    if not record_id.isdigit():
        bot.send_message(message.chat.id, "ID –∑–∞–ø–∏—Å–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        bot.register_next_step_handler(message, confirm_delete)
        return
    success = manager.delete_record(record_id)
    if success:
        bot.send_message(message.chat.id, f"–ó–∞–ø–∏—Å—å —Å ID {record_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
    else:
        bot.send_message(message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å —Å ID {record_id}.")

@bot.message_handler(commands=['update_income'])
def update_income(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –¥–æ—Ö–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å:")
    bot.register_next_step_handler(message, update_income_amount)

def update_income_amount(message):
    income_id = message.text
    if not income_id.isdigit():
        bot.send_message(message.chat.id, "ID –¥–æ—Ö–æ–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        bot.register_next_step_handler(message, update_income_amount)
        return
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:")
    bot.register_next_step_handler(message, update_income_description, income_id=income_id)

def update_income_description(message, income_id):
    amount = message.text
    user_id = message.from_user.id
    data = [user_id, amount]
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–∞:")
    bot.register_next_step_handler(message, perform_income_update, data=data, income_id=income_id)

def perform_income_update(message, data, income_id):
    description = message.text
    data.append(description)
    success = manager.update_income(data, income_id)
    if success:
        bot.send_message(message.chat.id, f"–î–æ—Ö–æ–¥ —Å ID {income_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
    else:
        bot.send_message(message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–æ—Ö–æ–¥ —Å ID {income_id}.")

@bot.message_handler(commands=['update_expense'])
def update_expense(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID —Ä–∞—Å—Ö–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å:")
    bot.register_next_step_handler(message, update_expense_amount)

def update_expense_amount(message):
    expense_id = message.text
    if not expense_id.isdigit():
        bot.send_message(message.chat.id, "ID —Ä–∞—Å—Ö–æ–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        bot.register_next_step_handler(message, update_expense_amount)
        return
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")
    bot.register_next_step_handler(message, update_expense_category, expense_id=expense_id)

def update_expense_category(message, expense_id):
    amount = message.text
    user_id = message.from_user.id
    data = [user_id, amount]
    categories = manager.get_expense_categories()
    category_names = [category[0] for category in categories]
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=gen_markup(category_names))
    bot.register_next_step_handler(message, update_expense_description, data=data, expense_id=expense_id, category_names=category_names)

def update_expense_description(message, data, expense_id, category_names):
    category = message.text
    if category == cancel_button:
        cancel(message)
        return
    if category not in category_names:
        bot.send_message(message.chat.id, "–¢—ã –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!", reply_markup=gen_markup(category_names))
        bot.register_next_step_handler(message, update_expense_description, data=data, expense_id=expense_id, category_names=category_names)
        return
    data.append(category)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞:")
    bot.register_next_step_handler(message, perform_expense_update, data=data, expense_id=expense_id)

def perform_expense_update(message, data, expense_id):
    description = message.text
    data.append(description)
    success = manager.update_expense(data, expense_id)
    if success:
        bot.send_message(message.chat.id, f"–†–∞—Å—Ö–æ–¥ —Å ID {expense_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
    else:
        bot.send_message(message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ —Å ID {expense_id}.")

if __name__ == '__main__':
    bot.infinity_polling()
